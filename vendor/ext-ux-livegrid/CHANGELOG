Version 0.2rc3
30-August-2008

- fixes;
 - BufferedGridView.js: last row would not always be rendered proper if the end of
records is reached and the panel would be resized so that more records are displayable
- enhancements:
 - BufferedGridView.js: improved calculating the height of the buffer inset in both
performance and functionality. Component now working with Safari 3.1 under Windows XP

Version 0.2rc2
29-August-2008

- fixes:
 - BufferedGridView.js: re-rendering rows would not work proper if a resize of the panel
during buffering happened; "adjustVisibleRows()" skips recalculating the "rowIndex"
property now if the livegrid is currently buffering. "replaceLiveRows()" would not always
calculate the exact range of rows to render; adjusted conditions to check for valid ranges

Version 0.2rc1
29-August-2008

- fixes:
 - BufferedGridView.js: fixed a bug that would not recalculate the scrollbar's
height if the number of possible rows to display in the view would exceed the
total number of records in the store
 - BufferedRowSelectionModel: "selectRow()" would allow selecting indexes greater than
the "totalLength"-property of the store; added condition to check whether the index is
out of bounds (closes google issue 5)
- BufferedStore.js: buffer range would not store the number of the total length
of the records when last possible range is reached, but instead the number of the
start-parameter with the "limit"-parameter, which lead to errors when a last
possible record to render is requested that cannot be found in the store

 - enhancements:
- BufferedGridView.js: last row in the grid is now clipped instead of removed if
it is not fully displayable



Version 0.1.2
25-August-2008

- fixes:
 - BufferedGridView: wrong calculation of "start"-parameter for the buffer-request
caused infinite loop. Adjusted calculation of return value in "getPredictedBufferIndex()"
to always return correct value for "start"-parameter if the "nearLimit" property is greater
than or equals to half of store's "bufferSize" property (fixes google issue 4)

Version 0.1.1
25-August-2008

- fixes:
 - BufferedGridView: grid would not be repainted correctly if a column was moved:
method "onColumnMove()" with appropriate implementation added (fixes google issue 9);
"onRemove()" would not work properly if the end of the data was reached in the visible
rect and rows from within that rect are removed. Adjusted "lastRowIndex" to be equal to
"rowIndex", and skipped implicit "processRows()" call in "replaceLiveRows()" via passing
a new third argument "processRows", which will only call "processRows()" if the argument
was not set to false; removed call to "selections.add()" in "processRows()" since selections
are already in the "bufferedSelections" property of the selection model, and previously
selected records are still part of the "selections"-property of the selection model.


- enhancements:
 - BufferedGridView: Added functionality for listening to erroneous responses from
buffer-requests. Event "bufferfailure" will now be fired if the store indicated that
the proxy's response was erroneous; added "options" parameter to be passed to
"buffer"-event

 - BufferedGridToolbar: Toolbar is now listening to "bufferfailure"-event and resets
the reload-button to "enabled" if necessary.

Version 0.1
16-June-2008

- enhancements:
 - BufferedGridStore - added overrride of getAt() method to translate
the passed argument to the appropriate index in the model; updated sources to take
overriden method into account
 - added cfg option "scrollDelay" in BufferedGridView for buffering calls to onLiveScroll
when scroll-event gets fired (thanks to Rich Waters)
 - BufferedStore: removed custom applySort() implementation due to changes in findInsertIndex
 - BufferedStore: changed findInsertIndex to use parent implementation first, then check
return value and adjust the index if needed
 - BufferedStore/BufferedGridView: moved bufferRange-member to BufferedStore
 - BufferedStore: optimized insert() method in BufferedStore
 - allowed to add records at position "0" in grid (existing records get shifted down)

- fixes:
 - wrong calculation in BufferedGridView.onLiveScroll (based on lastScrollPosition and actual
scrollPosition) caused the view sometimes to not re-render some rows
 - provided bug fix for "ensureVisible: returned x-coordinate does not take the x-position
of the gridpanel into account" (see http://extjs.com/forum/showthread.php?p=175331#post175331)
 - wrong calculation of last displayable row after removing a row caused selection-model
to get out of synch with the store's data
 - when adding a record to the store on the fly, the ensureVisible-method
would not work always corect afterwards
 - when adding records, a previously made selection would block selecting the
newly added record
 - skipped request for updateLiveRows in Ext.ux.grid.BufferedGridView.adjustVisibleRows
when number of total records in store is less than the number of visible rows
 - request for buffering data in Ext.ux.grid.BufferedGridView.updateLiveRows() did
not apply the property "lastOptions.params" to the params sent with the buffer-request