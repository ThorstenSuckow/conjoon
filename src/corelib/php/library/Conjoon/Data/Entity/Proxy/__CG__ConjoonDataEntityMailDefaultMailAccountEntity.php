<?php

namespace Conjoon\Data\Entity\Proxy\__CG__\Conjoon\Data\Entity\Mail;

/**
 * @see Conjoon\Data\Entity\EntityProxy
 */
require_once 'Conjoon/Data/Entity/EntityProxy.php';

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultMailAccountEntity extends \Conjoon\Data\Entity\Mail\DefaultMailAccountEntity
    implements \Doctrine\ORM\Proxy\Proxy, Conjoon\Data\Entity\EntityProxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }


    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function setReplyAddress($replyAddress)
    {
        $this->__load();
        return parent::setReplyAddress($replyAddress);
    }

    public function getReplyAddress()
    {
        $this->__load();
        return parent::getReplyAddress();
    }

    public function setIsStandard($isStandard)
    {
        $this->__load();
        return parent::setIsStandard($isStandard);
    }

    public function getIsStandard()
    {
        $this->__load();
        return parent::getIsStandard();
    }

    public function setProtocol($protocol)
    {
        $this->__load();
        return parent::setProtocol($protocol);
    }

    public function getProtocol()
    {
        $this->__load();
        return parent::getProtocol();
    }

    public function setServerInbox($serverInbox)
    {
        $this->__load();
        return parent::setServerInbox($serverInbox);
    }

    public function getServerInbox()
    {
        $this->__load();
        return parent::getServerInbox();
    }

    public function setServerOutbox($serverOutbox)
    {
        $this->__load();
        return parent::setServerOutbox($serverOutbox);
    }

    public function getServerOutbox()
    {
        $this->__load();
        return parent::getServerOutbox();
    }

    public function setUsernameInbox($usernameInbox)
    {
        $this->__load();
        return parent::setUsernameInbox($usernameInbox);
    }

    public function getUsernameInbox()
    {
        $this->__load();
        return parent::getUsernameInbox();
    }

    public function setUsernameOutbox($usernameOutbox)
    {
        $this->__load();
        return parent::setUsernameOutbox($usernameOutbox);
    }

    public function getUsernameOutbox()
    {
        $this->__load();
        return parent::getUsernameOutbox();
    }

    public function setUserName($userName)
    {
        $this->__load();
        return parent::setUserName($userName);
    }

    public function getUserName()
    {
        $this->__load();
        return parent::getUserName();
    }

    public function setIsOutboxAuth($isOutboxAuth)
    {
        $this->__load();
        return parent::setIsOutboxAuth($isOutboxAuth);
    }

    public function getIsOutboxAuth()
    {
        $this->__load();
        return parent::getIsOutboxAuth();
    }

    public function setPasswordInbox($passwordInbox)
    {
        $this->__load();
        return parent::setPasswordInbox($passwordInbox);
    }

    public function getPasswordInbox()
    {
        $this->__load();
        return parent::getPasswordInbox();
    }

    public function setPasswordOutbox($passwordOutbox)
    {
        $this->__load();
        return parent::setPasswordOutbox($passwordOutbox);
    }

    public function getPasswordOutbox()
    {
        $this->__load();
        return parent::getPasswordOutbox();
    }

    public function setSignature($signature)
    {
        $this->__load();
        return parent::setSignature($signature);
    }

    public function getSignature()
    {
        $this->__load();
        return parent::getSignature();
    }

    public function setIsSignatureUsed($isSignatureUsed)
    {
        $this->__load();
        return parent::setIsSignatureUsed($isSignatureUsed);
    }

    public function getIsSignatureUsed()
    {
        $this->__load();
        return parent::getIsSignatureUsed();
    }

    public function setPortInbox($portInbox)
    {
        $this->__load();
        return parent::setPortInbox($portInbox);
    }

    public function getPortInbox()
    {
        $this->__load();
        return parent::getPortInbox();
    }

    public function setPortOutbox($portOutbox)
    {
        $this->__load();
        return parent::setPortOutbox($portOutbox);
    }

    public function getPortOutbox()
    {
        $this->__load();
        return parent::getPortOutbox();
    }

    public function setInboxConnectionType($inboxConnectionType)
    {
        $this->__load();
        return parent::setInboxConnectionType($inboxConnectionType);
    }

    public function getInboxConnectionType()
    {
        $this->__load();
        return parent::getInboxConnectionType();
    }

    public function setOutboxConnectionType($outboxConnectionType)
    {
        $this->__load();
        return parent::setOutboxConnectionType($outboxConnectionType);
    }

    public function getOutboxConnectionType()
    {
        $this->__load();
        return parent::getOutboxConnectionType();
    }

    public function setIsCopyLeftOnServer($isCopyLeftOnServer)
    {
        $this->__load();
        return parent::setIsCopyLeftOnServer($isCopyLeftOnServer);
    }

    public function getIsCopyLeftOnServer()
    {
        $this->__load();
        return parent::getIsCopyLeftOnServer();
    }

    public function setIsDeleted($isDeleted)
    {
        $this->__load();
        return parent::setIsDeleted($isDeleted);
    }

    public function getIsDeleted()
    {
        $this->__load();
        return parent::getIsDeleted();
    }

    public function setUser(\Conjoon\Data\Entity\User\UserEntity $user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'address', 'replyAddress', 'isStandard', 'protocol', 'serverInbox', 'serverOutbox', 'usernameInbox', 'usernameOutbox', 'userName', 'isOutboxAuth', 'passwordInbox', 'passwordOutbox', 'signature', 'isSignatureUsed', 'portInbox', 'portOutbox', 'inboxConnectionType', 'outboxConnectionType', 'isCopyLeftOnServer', 'isDeleted', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }

    }
}