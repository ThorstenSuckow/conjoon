<?php

namespace Conjoon\Data\Entity\Proxy\__CG__\Conjoon\Data\Entity\Mail;

/**
 * @see Conjoon\Data\Entity\EntityProxy
 */
require_once 'Conjoon/Data/Entity/EntityProxy.php';

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultMessageEntity extends \Conjoon\Data\Entity\Mail\DefaultMessageEntity
    implements \Doctrine\ORM\Proxy\Proxy, \Conjoon\Data\Entity\EntityProxy

{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function getSubject()
    {
        $this->__load();
        return parent::getSubject();
    }

    public function getFrom()
    {
        $this->__load();
        return parent::getFrom();
    }

    public function getReplyTo()
    {
        $this->__load();
        return parent::getReplyTo();
    }

    public function getTo()
    {
        $this->__load();
        return parent::getTo();
    }

    public function getCc()
    {
        $this->__load();
        return parent::getCc();
    }

    public function getBcc()
    {
        $this->__load();
        return parent::getBcc();
    }

    public function getInReplyTo()
    {
        $this->__load();
        return parent::getInReplyTo();
    }

    public function getReferences()
    {
        $this->__load();
        return parent::getReferences();
    }

    public function getContentTextPlain()
    {
        $this->__load();
        return parent::getContentTextPlain();
    }

    public function getContentTextHtml()
    {
        $this->__load();
        return parent::getContentTextHtml();
    }

    public function getRecipients()
    {
        $this->__load();
        return parent::getRecipients();
    }

    public function getSender()
    {
        $this->__load();
        return parent::getSender();
    }

    public function getGroupwareEmailItemsFlags()
    {
        $this->__load();
        return parent::getGroupwareEmailItemsFlags();
    }

    public function getGroupwareEmailFolders()
    {
        $this->__load();
        return parent::getGroupwareEmailFolders();
    }

    public function setGroupwareEmailFolders(\Conjoon\Data\Entity\Mail\MailFolderEntity $groupwareEmailFolders = null)
    {
        $this->__load();
        return parent::setGroupwareEmailFolders($groupwareEmailFolders);
    }

    public function removeGroupwareEmailItemsFlag(\Conjoon\Data\Entity\Mail\MessageFlagEntity $groupwareEmailItemsFlags)
    {
        $this->__load();
        return parent::removeGroupwareEmailItemsFlag($groupwareEmailItemsFlags);
    }

    public function addGroupwareEmailItemsFlag(\Conjoon\Data\Entity\Mail\MessageFlagEntity $groupwareEmailItemsFlags)
    {
        $this->__load();
        return parent::addGroupwareEmailItemsFlag($groupwareEmailItemsFlags);
    }

    public function setSender($sender)
    {
        $this->__load();
        return parent::setSender($sender);
    }

    public function setRecipients($recipients)
    {
        $this->__load();
        return parent::setRecipients($recipients);
    }

    public function setContentTextHtml($contentTextHtml)
    {
        $this->__load();
        return parent::setContentTextHtml($contentTextHtml);
    }

    public function setContentTextPlain($contentTextPlain)
    {
        $this->__load();
        return parent::setContentTextPlain($contentTextPlain);
    }

    public function setReferences($references)
    {
        $this->__load();
        return parent::setReferences($references);
    }

    public function setInReplyTo($inReplyTo)
    {
        $this->__load();
        return parent::setInReplyTo($inReplyTo);
    }

    public function setBcc($bcc)
    {
        $this->__load();
        return parent::setBcc($bcc);
    }

    public function setCc($cc)
    {
        $this->__load();
        return parent::setCc($cc);
    }

    public function setTo($to)
    {
        $this->__load();
        return parent::setTo($to);
    }

    public function setReplyTo($replyTo)
    {
        $this->__load();
        return parent::setReplyTo($replyTo);
    }

    public function setFrom($from)
    {
        $this->__load();
        return parent::setFrom($from);
    }

    public function setSubject($subject)
    {
        $this->__load();
        return parent::setSubject($subject);
    }

    public function setDate($date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function __sleep()
    {
        return array(
            '__isInitialized__', 'id',
            'date',
            'subject',
            'from',
            'replyTo',
            'to',
            'cc',
            'bcc',
            'inReplyTo',
            'references',
            'contentTextPlain',
            'contentTextHtml',
            'recipients',
            'sender',
            'groupwareEmailItemsFlags',
            'groupwareEmailFolders'
        );
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }

    }
}