<?php

namespace Conjoon\Data\Entity\Proxy\__CG__\Conjoon\Data\Entity\Mail;

/**
 * @see Conjoon\Data\Entity\EntityProxy
 */
require_once 'Conjoon/Data/Entity/EntityProxy.php';

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultAttachmentEntity
    extends \Conjoon\Data\Entity\Mail\DefaultAttachmentEntity
    implements \Doctrine\ORM\Proxy\Proxy, \Conjoon\Data\Entity\EntityProxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }


    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setKey($key)
    {
        $this->__load();
        return parent::setKey($key);
    }

    public function getKey()
    {
        $this->__load();
        return parent::getKey();
    }

    public function setFileName($fileName)
    {
        $this->__load();
        return parent::setFileName($fileName);
    }

    public function getFileName()
    {
        $this->__load();
        return parent::getFileName();
    }

    public function getMimeType()
    {
        $this->__load();
        return parent::getMimeType();
    }

    public function setMimeType($mimeType)
    {
        $this->__load();
        return parent::setMimeType($mimeType);
    }

    public function getEncoding()
    {
        $this->__load();
        return parent::getEncoding();
    }

    public function setEncoding($encoding)
    {
        $this->__load();
        return parent::setEncoding($encoding);
    }

    public function getContentId()
    {
        $this->__load();
        return parent::getContentId();
    }

    public function setContentId($contentId)
    {
        $this->__load();
        return parent::setContentId($contentId);
    }

    public function getAttachmentContent()
    {
        $this->__load();
        return parent::getAttachmentContent();
    }

    public function setAttachmentContent(\Conjoon\Data\Entity\Mail\AttachmentContentEntity $attachmentContent)
    {
        $this->__load();
        return parent::setAttachmentContent($attachmentContent);
    }

    public function setMessage(\Conjoon\Data\Entity\Mail\MessageEntity $message)
    {
        $this->__load();
        return parent::setMessage($message);
    }

    public function getMessage()
    {
        $this->__load();
        return parent::getMessage();
    }


    public function __sleep()
    {
        return array(
            '__isInitialized__',
            'id',
            'key',
            'fileName',
            'mimeType',
            'encoding',
            'contentId',
            'attachmentContent',
            'message'
        );
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }

    }
}
