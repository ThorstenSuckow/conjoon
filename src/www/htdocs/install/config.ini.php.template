;<?php
;/**
; * conjoon
; * (c) 2002-2009 siteartwork.de/conjoon.org
; * licensing@conjoon.org
; *
; * $Author$
; * $Id$
; * $Date$
; * $Revision$
; * $LastChangedDate$
; * $LastChangedBy$
; * $URL$
; */
; ?>
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                             README                                        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This is the template for the application configuration file for the conjoon
; software.
; You should set the variables to the values that suits your installation and
; then rename this file to "config.ini.php".
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                         SECURITY WARNING                                  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Do not remove the line below, or otherwise you risc exposing your application
; settings (i.e. passwords, db settings etc.). You can, however, remove everything
; between line 1 and this line.
;
; ------- DO NOT REMOVE THE FOLLOWING LINE ------
;<?php die('forbidden');?>
; --------- DO NOT REMOVE THE LINE ABOVE --------



;;;;;;;;;;;;;;;;;;;;;;;;
;;;   ENVIRONMENT    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;
[environment]

; if your hoster does not allow you to configure php's include path, set this to
; the path where the "lib" folder resides.
; Notice: since the bootstrapper has to
; re-set the include path on every request, it is better to hardcode this value
; in your webserver's config.
; Example:
; UNIX: "/path1:/path2"
; Windows: "\path1;\path2"
; Notice:
; If you use this setting, make sure you quote the value if it contains a semicolon
; when specifying more than one directory, otherwise conjoon will interpret
; anything that follows the semicolon as a comment.
include_path = {INCLUDE_PATH}

; set this to the path where the "application" folder can be found.
; make sure the containing folders are readable and writable by the webserver.
; the path may be relative to the folder where the index.pho resides in.
application_path = {APPLICATION_PATH}

; set this to the path under which conjoon is available on your host.
; Example: If you configured your webserver so that conjoon is available
; under http://my.domain.com/, the value must be set to "/". If you configured
; your webserver so that the application is available under http://my.domain.com/app/,
; the value must be set to "app".
base_url = {BASE_URL}

; The value should be set to anything that provides more information about the
; context conjoon is installed in. The value is not needed for any evaluation tasks,
; but will appear at some places in the software, such as the login screen.
; If you are running the software from an USB stick, the value for this property could
; be somewhat like "USB installation"
edition = {EDITION}


;;;;;;;;;;;;;;;;;;;;;;;;
;;;   DATABASE       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;
[database]
; set this value to the adapter conjoon should use for db connections.
; There is currently only support for pdo_mysql, so you should not change
; this value.
adapter = {DATABASE.ADAPTER}

; database host
params.host = {DATABASE.HOST}

; port your database server listens to. For mysql, this should default to
; "3306"
params.port = {DATABASE.PORT}

; username for db connections
params.username = {DATABASE.USER}

; password for db connections
params.password = {DATABASE.PASSWORD}

; the name of the database used
params.dbname = {DATABASE.DATABASE}

; max_allowed_packet denotes the maximum site of a packet that can be stored
; in a database using the configured connection. If you have worked with
; MySQL before, this value should be familiar to you. However, it's used for
; all db adapters: Provide a value that is less than or equal to the
; "max_allowed_packet" variable of your MySQL server configuration (or any configuration
; setting of the database server you are using that corresponds to this variable's
; functionality). The value has to be provided in bytes.
; If left empty, conjoon will look up this value from the database configuration by itself.
; Setting this value is mainly important for the email module of conjoon, as emails vary in
; size and any email that is larger than max_allowed_packet cannot and wil not be stored
; into the database
variables.max_allowed_packet = {DATABASE_MAX_ALLOWED_PACKET}



;;;;;;;;;;;;;;;;;;;;;;;;
;;;      CACHE       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;
[cache]

;;;;;;;;;;;;;;;;;;;;
;;  CACHE EMAILS  ;;
;;;;;;;;;;;;;;;;;;;;

; set this to any valid Zend_Cache_Frontend-type. Note, that if you change
; the type, you have to adjust the frontend-settings according to the new
; frontend type. By default, conjoon is optimized to use the
; Zend_Cache_Frontend_Core-class
email.message.frontend_type = core

;Disable / Tune the automatic cleaning process (garbage collector): 0 means
; no automatic cache cleaning, 1 means systematic cache cleaning and x > 1 means
; automatic random cleaning 1 times in x write operations.
email.message.frontend.automatic_cleaning_factor = 10

; denotes the valid lifetime of a cached object. Defaults to 31536000, which is
; approximately 1 year
email.message.frontend.lifetime = 31536000

; Tells whether caching is active or inactive. Set this to 0, and caching
; won't happen
email.message.frontend.caching = 1

; Whether to use automatic serialization of email messages when caching
email.message.frontend.automatic_serialization = 1

; if set to 1, the core will set the ignore_user_abort PHP flag inside the
; save() method to avoid cache corruptions in some cases
email.message.frontend.ignore_user_abort = 1

; set this to any valid Zend_Cache_Backend-type. Note, that if you change
; the type, you have to adjust the backend-settings according to the new
; backend type. By default, conjoon is optimized to use the
; Zend_Cache_Backend_File-class
email.message.backend_type = file

; Directory where to store cache files. If the name does not start with a slash or a drive
; letter (i.e. F:/), conjoon asumes that the path is relative to the application path
email.message.backend.cache_dir = cache/email/messages

; Hashed directory structure level : 0 means "no hashed directory structure", 1 means
; "one level of directory", 2 means "two levels"... This option can speed up the cache
; only when you have many thousands of cache files. Only specific benchs can help you to
; choose the perfect value for you. Maybe, 1 or 2 is a good start.
email.message.backend.hashed_directory_level = 1

;;;;;;;;;;;;;;;;;;;
;;  CACHE FEEDS  ;;
;;;;;;;;;;;;;;;;;;;

; set this to any valid Zend_Cache_Frontend-type. Note, that if you change
; the type, you have to adjust the frontend-settings according to the new
; frontend type. By default, conjoon is optimized to use the
; Zend_Cache_Frontend_Core-class
feed.item.frontend_type = core

;Disable / Tune the automatic cleaning process (garbage collector): 0 means
; no automatic cache cleaning, 1 means systematic cache cleaning and x > 1 means
; automatic random cleaning 1 times in x write operations.
feed.item.frontend.automatic_cleaning_factor = 10

; denotes the valid lifetime of a cached object. Defaults to 31536000, which is
; approximately 1 year
feed.item.frontend.lifetime = 31536000

; Tells whether caching is active or inactive. Set this to 0, and caching
; won't happen
feed.item.frontend.caching = 1

; Whether to use automatic serialization of feed items when caching
feed.item.frontend.automatic_serialization = 1

; if set to 1, the core will set the ignore_user_abort PHP flag inside the
; save() method to avoid cache corruptions in some cases
feed.item.frontend.ignore_user_abort = 1

; set this to any valid Zend_Cache_Backend-type. Note, that if you change
; the type, you have to adjust the backend-settings according to the new
; backend type. By default, conjoon is optimized to use the
; Zend_Cache_Backend_File-class
feed.item.backend_type = file

; Directory where to store cache files. If the name does not start with a slash or a drive
; letter (i.e. F:/), conjoon asumes that the path is relative to the application path
feed.item.backend.cache_dir = cache/feed/items

; Hashed directory structure level : 0 means "no hashed directory structure", 1 means
; "one level of directory", 2 means "two levels"... This option can speed up the cache
; only when you have many thousands of cache files. Only specific benchs can help you to
; choose the perfect value for you. Maybe, 1 or 2 is a good start.
feed.item.backend.hashed_directory_level = 1

;;;;;;;;;;;;;;;;
;; CACHE DB   ;;
;;;;;;;;;;;;;;;;

; set this to any valid Zend_Cache_Frontend-type. Note, that if you change
; the type, you have to adjust the frontend-settings according to the new
; frontend type. By default, conjoon is optimized to use the
; Zend_Cache_Frontend_Core-class
db.metadata.frontend_type = core

; Disable / Tune the automatic cleaning process (garbage collector): 0 means
; no automatic cache cleaning, 1 means systematic cache cleaning and x > 1 means
; automatic random cleaning 1 times in x write operations.
db.metadata.frontend.automatic_cleaning_factor = 10

; denotes the valid lifetime of a cached object. Defaults to 31536000, which is
; approximately 1 year
db.metadata.frontend.lifetime = 31536000

; Tells whether caching is active or inactive. Set this to 0, and caching
; won't happen
db.metadata.frontend.caching = 1

; Whether to use automatic serialization of feed items when caching
db.metadata.frontend.automatic_serialization = 1

; if set to 1, the core will set the ignore_user_abort PHP flag inside the
; save() method to avoid cache corruptions in some cases
db.metadata.frontend.ignore_user_abort = 1

; set this to any valid Zend_Cache_Backend-type. Note, that if you change
; the type, you have to adjust the backend-settings according to the new
; backend type. By default, conjoon is optimized to use the
; Zend_Cache_Backend_File-class
db.metadata.backend_type = file

; Directory where to store cache files. If the name does not start with a slash or a drive
; letter (i.e. F:/), conjoon asumes that the path is relative to the application path
db.metadata.backend.cache_dir = cache/db/metadata

; Hashed directory structure level : 0 means "no hashed directory structure", 1 means
; "one level of directory", 2 means "two levels"... This option can speed up the cache
; only when you have many thousands of cache files. Only specific benchs can help you to
; choose the perfect value for you. Maybe, 1 or 2 is a good start.
; since we don't expect to have thousands of tables in our db, we can safely leave the value
; to 0
db.metadata.backend.hashed_directory_level = 0